** start of undefined **

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Technical Documentation</title>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <!-- Navigation Bar -->
  <nav id="navbar">
    <header>JavaScript Documentation</header>
    <a href="#Introduction" class="nav-link">Introduction</a>
    <a href="#Variables" class="nav-link">Variables</a>
    <a href="#Functions" class="nav-link">Functions</a>
    <a href="#Loops" class="nav-link">Loops</a>
    <a href="#Objects" class="nav-link">Objects</a>
  </nav>
  
  <!-- Main Documentation Content -->
  <main id="main-doc">
    <!-- Introduction Section -->
    <section id="Introduction" class="main-section">
      <header>Introduction</header>
      <p>JavaScript is a versatile programming language primarily used for creating interactive and dynamic web content. It's an essential part of web development and is supported by all modern web browsers.</p>
      <p>In this documentation, we will cover the basic concepts of JavaScript including variables, functions, loops, and objects.</p>
      <ul>
        <li>JavaScript is a high-level, often just-in-time compiled language.</li>
        <li>It conforms to the ECMAScript specification.</li>
        <li>It is multi-paradigm, supporting event-driven, functional, and imperative programming styles.</li>
        <li>JavaScript has dynamic typing and first-class functions.</li>
        <li>It is an essential technology of the World Wide Web.</li>
      </ul>
    </section>
    
    <!-- Variables Section -->
    <section id="Variables" class="main-section">
      <header>Variables</header>
      <p>Variables are used to store data that can be used later in your code. They are declared using the var, let, or const keywords.</p>
      <ul>
        <li><code>var</code> can be redeclared and updated.</li>
        <li><code>let</code> can be updated but not redeclared.</li>
        <li><code>const</code> cannot be updated or redeclared.</li>
      </ul>
      <p>Example of declaring variables:</p>
      <pre><code>let name = 'John';</code></pre>
      <pre><code>const age = 30;</code></pre>
      <pre><code>var isStudent = true;</code></pre>
    </section>
    
    <!-- Functions Section -->
    <section id="Functions" class="main-section">
      <header>Functions</header>
      <p>Functions are reusable blocks of code that perform a specific task. They can take inputs, process them, and return an output.</p>
      <p>Example of a function:</p>
      <pre><code>function greet(name) {
  return 'Hello ' + name;
}</code></pre>
      <p>Functions can be called with arguments:</p>
      <pre><code>console.log(greet('Alice'));</code></pre>
      <ul>
        <li>Functions allow code reuse and modularity.</li>
        <li>They can be stored in variables and passed as arguments.</li>
        <li>JavaScript supports first-class functions.</li>
        <li>Arrow functions provide a concise syntax for function expressions.</li>
      </ul>
    </section>
    
    <!-- Loops Section -->
    <section id="Loops" class="main-section">
      <header>Loops</header>
      <p>Loops are used to execute a block of code multiple times. JavaScript supports various loops such as for, while, and do-while loops.</p>
      <p>Example of a for loop:</p>
      <pre><code>for (let i = 0; i &lt; 5; i++) {
  console.log(i);
}</code></pre>
      <p>Example of a while loop:</p>
      <pre><code>let count = 0;
while (count &lt; 5) {
  console.log(count);
  count++;
}</code></pre>
      <ul>
        <li><code>for</code> loops are best used when the number of iterations is known.</li>
        <li><code>while</code> loops are best when the condition is evaluated at the beginning.</li>
        <li><code>do-while</code> loops ensure the code is executed at least once.</li>
        <li>Loops are commonly used to iterate over arrays or objects.</li>
      </ul>
    </section>
    
    <!-- Objects Section -->
    <section id="Objects" class="main-section">
      <header>Objects</header>
      <p>Objects are collections of key-value pairs. They are used to store and manipulate data in JavaScript.</p>
      <ul>
        <li>Objects can store multiple related values as properties.</li>
        <li>They can contain methods, which are functions defined inside an object.</li>
        <li>Object properties can be accessed using dot notation or bracket notation.</li>
        <li>Objects are the fundamental building blocks of JavaScript applications.</li>
      </ul>
      <p>Example of an object:</p>
      <pre><code>const person = {
  name: 'John',
  age: 30,
  isStudent: true
};</code></pre>
      <p>Accessing object properties:</p>
      <pre><code>console.log(person.name); // 'John'</code></pre>
    </section>
  </main>
</body>
</html>



** end of undefined **

** start of undefined **

/* General Styling */
body {
  font-family: Arial, sans-serif;
  margin: 0;
  background-color: #f4f4f4;
  display: flex;
}

#navbar {
  width: 250px;
  background-color: #333;
  color: #fff;
  height: 100vh;
  position: fixed;
  overflow-y: auto;
  padding-top: 20px;
}

#navbar header {
  text-align: center;
  font-size: 1.5em;
  padding: 10px 0;
  background-color: #444;
}

.nav-link {
  display: block;
  color: #ddd;
  text-decoration: none;
  padding: 10px 20px;
  border-bottom: 1px solid #444;
}

.nav-link:hover {
  background-color: #575757;
  color: #fff;
}

#main-doc {
  margin-left: 270px;
  padding: 20px;
  max-width: 800px;
}

/* Section Styling */
.main-section {
  margin-bottom: 40px;
}

header {
  font-size: 1.5em;
  margin-bottom: 10px;
}

p {
  margin: 10px 0;
}

pre {
  background-color: #f0f0f0;
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 4px;
}

code {
  font-family: 'Courier New', Courier, monospace;
}

/* Responsive Design */
@media (max-width: 768px) {
  #navbar {
    width: 100%;
    height: auto;
    position: relative;
  }
  #main-doc {
    margin-left: 0;
    padding: 10px;
  }
}


** end of undefined **

